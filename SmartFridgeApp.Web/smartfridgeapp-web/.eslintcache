[{"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\index.js":"1","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\reportWebVitals.js":"2","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\App.js":"3","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\Home.js":"4","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\Recipes.js":"5","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\Header.js":"6","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\About.js":"7","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FoodProducts.js":"8","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgesDashboard.js":"9","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgeItemsDashboard.js":"10","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFoodProductDialog.js":"11","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewUserDialog.js":"12","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFridgeItemDialog.js":"13"},{"size":663,"mtime":1609674096686,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":1254,"mtime":1609674096681,"results":"17","hashOfConfig":"15"},{"size":328,"mtime":1609674096689,"results":"18","hashOfConfig":"15"},{"size":5836,"mtime":1609674096690,"results":"19","hashOfConfig":"15"},{"size":677,"mtime":1609674096682,"results":"20","hashOfConfig":"15"},{"size":472,"mtime":1609674096687,"results":"21","hashOfConfig":"15"},{"size":3053,"mtime":1609674096688,"results":"22","hashOfConfig":"15"},{"size":6064,"mtime":1609674096689,"results":"23","hashOfConfig":"15"},{"size":6824,"mtime":1609681124552,"results":"24","hashOfConfig":"15"},{"size":3553,"mtime":1609674096682,"results":"25","hashOfConfig":"15"},{"size":2358,"mtime":1609676406888,"results":"26","hashOfConfig":"15"},{"size":5059,"mtime":1609674096683,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"g2d47k",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\index.js",[],["61","62"],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\reportWebVitals.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\App.js",["63"],"import {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nimport Home from \"./pages/Home\";\r\nimport About from \"./pages/About\";\r\nimport FridgesDashboard from \"./pages/FridgesDashboard\";\r\nimport FridgeItemsDashboard from \"./pages/FridgeItemsDashboard\";\r\nimport FoodProducts from \"./pages/FoodProducts\";\r\nimport Recipes from \"./pages/Recipes\";\r\nimport Header from \"./components/Header\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <div>\r\n          <Header />\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Redirect to=\"/fridges\" />\r\n            </Route>\r\n            <Route path=\"/recipes\">\r\n              <Recipes />\r\n            </Route>\r\n            <Route path=\"/fridges\">\r\n              <FridgesDashboard />\r\n            </Route>\r\n            <Route path=\"/foodProducts\">\r\n              <FoodProducts />\r\n            </Route>\r\n\r\n            <Route path=\"/fridgeitems/:fridgeId\">\r\n              <FridgeItemsDashboard />\r\n            </Route>\r\n            <Route path=\"/about\">\r\n              <About />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\Home.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\Recipes.js",["64","65"],"import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../config_url.json\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst Recipes = () => {\r\n  const [dataLoading, finishLoading] = useState(true);\r\n  const [open, setOpen] = useState(false);\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"name\",\r\n      category: \"cat\",\r\n      reqTime: \"req\",\r\n      difficulty: \"diff\",\r\n      details: (\r\n        <Button gradient=\"aqua\" size=\"sm\">\r\n          Details\r\n        </Button>\r\n      ),\r\n    },\r\n  ]);\r\n\r\n  const [recipeDetails, setRecipeDetails] = useState({\r\n    recipeName: \"recipe\",\r\n    recipeDescription: \"desc\",\r\n    foodProducts: \"items\",\r\n  });\r\n  const [foodProductsFormatted, setFoodProductsFormatted] = useState([\r\n    {\r\n      foodProductId: \"1\",\r\n      foodProductName: \"fpName1\",\r\n      AmountValue: { Value: \"1\", Unit: \"Grams\" },\r\n    },\r\n  ]);\r\n\r\n  function formatFoodProducts(foodProds) {\r\n    var foodProductsString = foodProds;\r\n    var jsonObj = JSON.parse(foodProductsString);\r\n    var foodProductsList = jsonObj.ArrayOfFoodProductDetails.FoodProductDetails;\r\n\r\n    setFoodProductsFormatted([]);\r\n    for (const [key, value] of Object.entries(foodProductsList)) {\r\n      setFoodProductsFormatted((oldArray) => [\r\n        ...oldArray,\r\n        {\r\n          FoodProductId: value.FoodProductId,\r\n          FoodProductName: value.FoodProductName,\r\n          AmountValue: {\r\n            Value: value.AmountValue.Value,\r\n            Unit: value.AmountValue.Unit,\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n  }\r\n\r\n  const handleClickOpen = (recipeName, desc, foodProducts) => {\r\n    setRecipeDetails({\r\n      recipeName: recipeName,\r\n      recipeDescription: desc,\r\n      foodProducts: foodProducts,\r\n    });\r\n\r\n    formatFoodProducts(foodProducts);\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    console.log(\"use this recipe\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(configData.SERVER_URL + \"/api/recipes\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item, index) => ({\r\n          id: index + 1,\r\n          name: item.recipeName,\r\n          category: item.recipeCategory,\r\n          reqTime: item.requiredTime,\r\n          difficulty: item.levelOfDifficulty,\r\n          details: (\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={<VisibilityIcon />}\r\n              onClick={() =>\r\n                handleClickOpen(\r\n                  item.recipeName,\r\n                  item.description,\r\n                  item.foodProducts\r\n                )\r\n              }\r\n            >\r\n              Details\r\n            </Button>\r\n          ),\r\n        }));\r\n\r\n        setRows(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => finishLoading(false));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">\r\n          {recipeDetails.recipeName}\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n            {foodProductsFormatted.map((foodProduct) => {\r\n              return (\r\n                <ListItem key={foodProduct.FoodProductId}>\r\n                  <ListItemText>\r\n                    - {foodProduct.foodProductName}{\" \"}\r\n                    {foodProduct.AmountValue.Value}{\" \"}\r\n                    {foodProduct.AmountValue.Unit}\r\n                  </ListItemText>\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n          <br />\r\n          <DialogContentText>\r\n            {recipeDetails.recipeDescription}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleAdd} color=\"primary\" variant=\"outlined\">\r\n            Use this recipe\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {dataLoading ? (\r\n        <div>\r\n          <CircularProgress />\r\n          <p>Loading recipes</p>\r\n        </div>\r\n      ) : (\r\n        <MDBTable btn>\r\n          <MDBTableHead columns={columns} />\r\n          <MDBTableBody rows={rows} />\r\n        </MDBTable>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    label: \"#\",\r\n    field: \"id\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Name\",\r\n    field: \"name\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Category\",\r\n    field: \"category\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Required time\",\r\n    field: \"reqTime\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Difficulty\",\r\n    field: \"difficulty\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"#\",\r\n    field: \"details\",\r\n    sort: \"asc\",\r\n  },\r\n];\r\n\r\nexport default Recipes;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\Header.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\About.js",["66","67","68"],"import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"About\">\r\n      <h1>About page</h1>\r\n      {/* <Link\r\n        className=\"btn btn-primary\"\r\n        to={{\r\n          pathname: \"/fridgeitems\",\r\n          state: 1,\r\n        }}\r\n      >\r\n        Send 1\r\n      </Link> */}\r\n      <Link to=\"/\">Go to Home page</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FoodProducts.js",["69"],"import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../config_url.json\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\nimport NewFoodProductDialog from \"../components/dialogs/NewFoodProductDialog\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport SnackBar from \"@material-ui/core/Snackbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst FoodProducts = () => {\r\n  const [dataLoading, finishLoading] = useState(true);\r\n  const [newFoodProductDialog, setNewFoodProductDialog] = useState(false);\r\n  const [categories, setCategories] = useState({\r\n    name: \"categoryName\",\r\n    categoryId: 1,\r\n  });\r\n\r\n  const [dummyState, rerender] = useState(1);\r\n  const handleRefresh = () => {\r\n    rerender(dummyState + 1);\r\n  };\r\n\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"foodProducts\",\r\n      category: \"category\",\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    fetch(configData.SERVER_URL + \"/api/foodproducts\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item, index) => ({\r\n          id: index + 1,\r\n          name: item.foodProductName,\r\n          category: item.foodProductCategory,\r\n        }));\r\n\r\n        setRows(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => finishLoading(false));\r\n\r\n    fetch(configData.SERVER_URL + \"/api/foodproducts/categories\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item) => ({\r\n          name: item.name,\r\n          categoryId: item.categoryId,\r\n        }));\r\n\r\n        setCategories(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, [dummyState]);\r\n\r\n  const handleCloseNewFoodProductDialog = () => {\r\n    setNewFoodProductDialog(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NewFoodProductDialog\r\n        categories={categories}\r\n        state={newFoodProductDialog}\r\n        handleClose={handleCloseNewFoodProductDialog}\r\n      />\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={() => setNewFoodProductDialog(true)}\r\n      >\r\n        Add new food product\r\n      </Button>\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={handleRefresh}\r\n        startIcon={<RefreshIcon />}\r\n      >\r\n        Refresh\r\n      </Button>\r\n      {dataLoading ? (\r\n        <div>\r\n          <CircularProgress />\r\n          <p>Loading food products</p>\r\n        </div>\r\n      ) : (\r\n        <MDBTable btn>\r\n          <MDBTableHead columns={columns} />\r\n          <MDBTableBody rows={rows} />\r\n        </MDBTable>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    label: \"#\",\r\n    field: \"id\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Name\",\r\n    field: \"name\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Category\",\r\n    field: \"category\",\r\n    sort: \"asc\",\r\n  },\r\n];\r\n\r\nexport default FoodProducts;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgesDashboard.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgeItemsDashboard.js",["70","71","72","73"],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFoodProductDialog.js",["74","75"],"import React, { useState } from \"react\";\r\nimport configData from \"../../config_url.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport SnackBar from \"@material-ui/core/Snackbar\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst NewFoodProductDialog = ({ categories, state, handleClose }) => {\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n  });\r\n  const [categoryId, setCategory] = useState(0);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const refreshForm = () => {\r\n    setValues({\r\n      name: \"\",\r\n      category: \"\",\r\n    });\r\n  };\r\n\r\n  const toastify = (val) => toast(val);\r\n  const onSelectChange = (event, val) => {\r\n    if (val != undefined && val != null) setCategory(val.foodProductId);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const obj = {\r\n      name: values.name,\r\n      category: categoryId,\r\n    };\r\n\r\n    fetch(configData.SERVER_URL + \"/api/foodProducts\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then(function (response) {\r\n        if (!response.ok) {\r\n          toastify(\"Cant add food product.\");\r\n          throw Error(response.statusText);\r\n        }\r\n        toastify(\"Food product added.\");\r\n        return response;\r\n      })\r\n      .then(refreshForm())\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n      .then(() => handleClose());\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ToastContainer />\r\n\r\n      <Dialog\r\n        open={state}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Add food product</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            name=\"name\"\r\n            label=\"Name\"\r\n            fullWidth\r\n            onChange={handleInputChange}\r\n            value={values.name}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Autocomplete\r\n            id=\"categories-combobox\"\r\n            options={categories}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: \"100%\" }}\r\n            onChange={onSelectChange}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Select category\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            variant=\"outlined\"\r\n            onClick={handleAdd}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewFoodProductDialog;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewUserDialog.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFridgeItemDialog.js",["76","77"],"import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../../config_url.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst NewFridgeItemDialog = ({\r\n  fridgeId,\r\n  selectedUserId,\r\n  state,\r\n  handleClose,\r\n}) => {\r\n  const [foodProducts, setFoodProducts] = useState([\r\n    { foodProductId: 1, foodProductName: \"fp\" },\r\n  ]);\r\n  const [foodProductId, setFoodProductId] = useState(0);\r\n  const [values, setValues] = useState({\r\n    note: \"\",\r\n    value: \"\",\r\n  });\r\n  const [unit, setUnit] = useState(\"NotAssigned\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"food products fetch\");\r\n    fetch(configData.SERVER_URL + \"/api/foodProducts\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const items = json.map((item, index) => ({\r\n          foodProductId: item.foodProductId,\r\n          foodProductName: item.foodProductName,\r\n        }));\r\n        setFoodProducts(items);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const re = /^[0-9\\b]+$/;\r\n    if (e.target.value === \"\" || re.test(e.target.value)) {\r\n      const { name, value } = e.target;\r\n      setValues({ ...values, [name]: value });\r\n    }\r\n  };\r\n\r\n  const handleUnit = (event, unit) => {\r\n    setUnit(unit);\r\n  };\r\n\r\n  const onSelectChange = (event, val) => {\r\n    if (val != undefined && val != null) setFoodProductId(val.foodProductId);\r\n  };\r\n\r\n  const refreshForm = () => {\r\n    setValues({\r\n      note: \"\",\r\n      unit: \"\",\r\n      value: \"\",\r\n    });\r\n    setFoodProductId(0);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const obj = {\r\n      userId: selectedUserId,\r\n      fridgeItem: {\r\n        foodProductId: foodProductId,\r\n        value: parseInt(values.value),\r\n        note: \"\",\r\n        unit: unit,\r\n      },\r\n    };\r\n    console.log(obj);\r\n\r\n    //if (obj.value != NaN && obj.value > 0) {\r\n    fetch(configData.SERVER_URL + \"/api/fridgeItems/\" + fridgeId + \"/add\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then(refreshForm())\r\n      .then(console.log(\"Success\"))\r\n      .then(() => handleClose());\r\n    //}\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={state}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <DialogTitle id=\"form-dialog-title\">Add Fridge item</DialogTitle>\r\n      <DialogContent>\r\n        <Autocomplete\r\n          id=\"foodproducts-combobox\"\r\n          options={foodProducts}\r\n          getOptionLabel={(option) => option.foodProductName}\r\n          style={{ width: \"100%\" }}\r\n          onChange={onSelectChange}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"Select food product\"\r\n              variant=\"outlined\"\r\n            />\r\n          )}\r\n        />\r\n        <br />\r\n        <TextField\r\n          name=\"value\"\r\n          label=\"Value\"\r\n          fullWidth\r\n          onChange={handleNumberChange}\r\n          value={values.value}\r\n        />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <ToggleButtonGroup\r\n          value={unit}\r\n          exclusive\r\n          onChange={handleUnit}\r\n          aria-label=\"text alignment\"\r\n        >\r\n          <ToggleButton value=\"Grams\" aria-label=\"left aligned\">\r\n            <Typography variant=\"body1\">Grams</Typography>\r\n          </ToggleButton>\r\n          <ToggleButton value=\"Pieces\" aria-label=\"centered\">\r\n            <Typography>Pieces</Typography>\r\n          </ToggleButton>\r\n          <ToggleButton value=\"Mililiter\" aria-label=\"right aligned\">\r\n            <Typography>Mililiter</Typography>\r\n          </ToggleButton>\r\n          <ToggleButton value=\"NotAssigned\" aria-label=\"justified\">\r\n            <Typography>None</Typography>\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n        <br />\r\n        <br />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={handleClose}\r\n          color=\"secondary\"\r\n          variant=\"outlined\"\r\n          startIcon={<CloseIcon />}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={handleAdd}\r\n          color=\"primary\"\r\n          startIcon={<AddIcon />}\r\n          variant=\"outlined\"\r\n        >\r\n          Add\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default NewFridgeItemDialog;\r\n",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":9,"column":8,"nodeType":"84","messageId":"85","endLine":9,"endColumn":12},{"ruleId":"82","severity":1,"message":"86","line":55,"column":17,"nodeType":"84","messageId":"85","endLine":55,"endColumn":20},{"ruleId":"87","severity":1,"message":"88","line":120,"column":6,"nodeType":"89","endLine":120,"endColumn":8,"suggestions":"90"},{"ruleId":"82","severity":1,"message":"91","line":2,"column":27,"nodeType":"84","messageId":"85","endLine":2,"endColumn":33},{"ruleId":"82","severity":1,"message":"92","line":2,"column":35,"nodeType":"84","messageId":"85","endLine":2,"endColumn":41},{"ruleId":"82","severity":1,"message":"93","line":2,"column":43,"nodeType":"84","messageId":"85","endLine":2,"endColumn":48},{"ruleId":"82","severity":1,"message":"94","line":7,"column":8,"nodeType":"84","messageId":"85","endLine":7,"endColumn":16},{"ruleId":"82","severity":1,"message":"95","line":11,"column":8,"nodeType":"84","messageId":"85","endLine":11,"endColumn":17},{"ruleId":"96","severity":1,"message":"97","line":50,"column":24,"nodeType":"98","messageId":"99","endLine":50,"endColumn":26},{"ruleId":"87","severity":1,"message":"100","line":91,"column":6,"nodeType":"89","endLine":91,"endColumn":34,"suggestions":"101"},{"ruleId":"87","severity":1,"message":"102","line":106,"column":6,"nodeType":"89","endLine":106,"endColumn":18,"suggestions":"103"},{"ruleId":"82","severity":1,"message":"94","line":10,"column":8,"nodeType":"84","messageId":"85","endLine":10,"endColumn":16},{"ruleId":"96","severity":1,"message":"97","line":36,"column":13,"nodeType":"98","messageId":"99","endLine":36,"endColumn":15},{"ruleId":"82","severity":1,"message":"104","line":48,"column":9,"nodeType":"84","messageId":"85","endLine":48,"endColumn":26},{"ruleId":"96","severity":1,"message":"97","line":66,"column":13,"nodeType":"98","messageId":"99","endLine":66,"endColumn":15},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'key' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleClickOpen'. Either include it or remove the dependency array.","ArrayExpression",["107"],"'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'SnackBar' is defined but never used.","'TextField' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'fridgeId' and 'handleConsume'. Either include them or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'fridgeId'. Either include it or remove the dependency array.",["109"],"'handleInputChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [handleClickOpen]",{"range":"116","text":"117"},"Update the dependencies array to be: [selectedUserId, dummyState, fridgeId, handleConsume]",{"range":"118","text":"119"},"Update the dependencies array to be: [dummyState, fridgeId]",{"range":"120","text":"121"},[3659,3661],"[handleClickOpen]",[2998,3026],"[selectedUserId, dummyState, fridgeId, handleConsume]",[3478,3490],"[dummyState, fridgeId]"]