[{"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\index.js":"1","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\reportWebVitals.js":"2","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\App.js":"3","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\Home.js":"4","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\Recipes.js":"5","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\Header.js":"6","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\About.js":"7","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FoodProducts.js":"8","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgesDashboard.js":"9","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgeItemsDashboard.js":"10","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFoodProductDialog.js":"11","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewUserDialog.js":"12","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFridgeItemDialog.js":"13","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewRecipeDialog.js":"14"},{"size":663,"mtime":1609674096686,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":1254,"mtime":1609674096681,"results":"18","hashOfConfig":"16"},{"size":328,"mtime":1609674096689,"results":"19","hashOfConfig":"16"},{"size":7204,"mtime":1609707871206,"results":"20","hashOfConfig":"16"},{"size":677,"mtime":1609674096682,"results":"21","hashOfConfig":"16"},{"size":472,"mtime":1609674096687,"results":"22","hashOfConfig":"16"},{"size":3053,"mtime":1609674096688,"results":"23","hashOfConfig":"16"},{"size":7103,"mtime":1609707221212,"results":"24","hashOfConfig":"16"},{"size":7408,"mtime":1609691474399,"results":"25","hashOfConfig":"16"},{"size":3862,"mtime":1609691886111,"results":"26","hashOfConfig":"16"},{"size":3067,"mtime":1609691446102,"results":"27","hashOfConfig":"16"},{"size":5584,"mtime":1609691410486,"results":"28","hashOfConfig":"16"},{"size":5035,"mtime":1609710653230,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"g2d47k",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\index.js",[],["65","66"],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\reportWebVitals.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\App.js",["67"],"import {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nimport Home from \"./pages/Home\";\r\nimport About from \"./pages/About\";\r\nimport FridgesDashboard from \"./pages/FridgesDashboard\";\r\nimport FridgeItemsDashboard from \"./pages/FridgeItemsDashboard\";\r\nimport FoodProducts from \"./pages/FoodProducts\";\r\nimport Recipes from \"./pages/Recipes\";\r\nimport Header from \"./components/Header\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <div>\r\n          <Header />\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Redirect to=\"/fridges\" />\r\n            </Route>\r\n            <Route path=\"/recipes\">\r\n              <Recipes />\r\n            </Route>\r\n            <Route path=\"/fridges\">\r\n              <FridgesDashboard />\r\n            </Route>\r\n            <Route path=\"/foodProducts\">\r\n              <FoodProducts />\r\n            </Route>\r\n\r\n            <Route path=\"/fridgeitems/:fridgeId\">\r\n              <FridgeItemsDashboard />\r\n            </Route>\r\n            <Route path=\"/about\">\r\n              <About />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\Home.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\Recipes.js",["68","69"],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\Header.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\About.js",["70","71","72"],"import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"About\">\r\n      <h1>About page</h1>\r\n      {/* <Link\r\n        className=\"btn btn-primary\"\r\n        to={{\r\n          pathname: \"/fridgeitems\",\r\n          state: 1,\r\n        }}\r\n      >\r\n        Send 1\r\n      </Link> */}\r\n      <Link to=\"/\">Go to Home page</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FoodProducts.js",["73"],"import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../config_url.json\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\nimport NewFoodProductDialog from \"../components/dialogs/NewFoodProductDialog\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport SnackBar from \"@material-ui/core/Snackbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst FoodProducts = () => {\r\n  const [dataLoading, finishLoading] = useState(true);\r\n  const [newFoodProductDialog, setNewFoodProductDialog] = useState(false);\r\n  const [categories, setCategories] = useState({\r\n    name: \"categoryName\",\r\n    categoryId: 1,\r\n  });\r\n\r\n  const [dummyState, rerender] = useState(1);\r\n  const handleRefresh = () => {\r\n    rerender(dummyState + 1);\r\n  };\r\n\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"foodProducts\",\r\n      category: \"category\",\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    fetch(configData.SERVER_URL + \"/api/foodproducts\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item, index) => ({\r\n          id: index + 1,\r\n          name: item.foodProductName,\r\n          category: item.foodProductCategory,\r\n        }));\r\n\r\n        setRows(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => finishLoading(false));\r\n\r\n    fetch(configData.SERVER_URL + \"/api/foodproducts/categories\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item) => ({\r\n          name: item.name,\r\n          categoryId: item.categoryId,\r\n        }));\r\n\r\n        setCategories(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, [dummyState]);\r\n\r\n  const handleCloseNewFoodProductDialog = () => {\r\n    setNewFoodProductDialog(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NewFoodProductDialog\r\n        categories={categories}\r\n        state={newFoodProductDialog}\r\n        handleClose={handleCloseNewFoodProductDialog}\r\n      />\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={() => setNewFoodProductDialog(true)}\r\n      >\r\n        Add new food product\r\n      </Button>\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={handleRefresh}\r\n        startIcon={<RefreshIcon />}\r\n      >\r\n        Refresh\r\n      </Button>\r\n      {dataLoading ? (\r\n        <div>\r\n          <CircularProgress />\r\n          <p>Loading food products</p>\r\n        </div>\r\n      ) : (\r\n        <MDBTable btn>\r\n          <MDBTableHead columns={columns} />\r\n          <MDBTableBody rows={rows} />\r\n        </MDBTable>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    label: \"#\",\r\n    field: \"id\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Name\",\r\n    field: \"name\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Category\",\r\n    field: \"category\",\r\n    sort: \"asc\",\r\n  },\r\n];\r\n\r\nexport default FoodProducts;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgesDashboard.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgeItemsDashboard.js",["74","75","76"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport configData from \"../config_url.json\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FastfoodIcon from \"@material-ui/icons/Fastfood\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport NumericInput from \"react-numeric-input\";\r\nimport NewUserDialog from \"../components/dialogs/NewUserDialog\";\r\nimport NewFridgeItemDialog from \"../components/dialogs/NewFridgeItemDialog\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst FridgeItemsDashboard = () => {\r\n  const { fridgeId } = useParams();\r\n  const [dummyState, rerender] = useState(1);\r\n  const [newUserDialogState, setNewUserDialogState] = useState(false);\r\n  const [newFridgeItemDialogState, setNewFridgeItemDialogState] = useState(\r\n    false\r\n  );\r\n  const amount = useRef(0);\r\n  const [usersLoading, finishUsersLoading] = useState(true);\r\n  const [fridgeItemsLoading, finishFridgeItemsLoading] = useState(true);\r\n  const [fridgeUsers, setUsersData] = useState([]);\r\n  const [selectedUserId, selectUser] = useState(\"None\");\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: 1,\r\n      categoryName: \"category\",\r\n      productName: \"product\",\r\n      value: 10,\r\n      unit: \"unit\",\r\n      consume: (\r\n        <span>\r\n          <NumericInput min={0} max={100} />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<FastfoodIcon />}\r\n          >\r\n            Consume\r\n          </Button>\r\n        </span>\r\n      ),\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (selectedUserId != \"None\") {\r\n      fetch(\r\n        configData.SERVER_URL +\r\n          \"/api/fridgeItems/\" +\r\n          fridgeId +\r\n          \"/\" +\r\n          selectedUserId\r\n      )\r\n        .then((response) => response.json())\r\n        .then((json) => {\r\n          const rowsArray = json.map((item, index) => ({\r\n            id: index + 1,\r\n            productName: item.productName,\r\n            categoryName: item.categoryName,\r\n            value: item.value,\r\n            unit: item.unit,\r\n            consume: (\r\n              <span>\r\n                <NumericInput\r\n                  min={0}\r\n                  max={10000}\r\n                  value={amount.curent}\r\n                  onChange={handleChange}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<FastfoodIcon />}\r\n                  onClick={() => handleConsume(item.fridgeItemId, item.unit)}\r\n                >\r\n                  Consume\r\n                </Button>\r\n              </span>\r\n            ),\r\n          }));\r\n\r\n          setRows(rowsArray);\r\n        })\r\n        .catch((error) => console.error(error))\r\n        .finally(() => finishFridgeItemsLoading(false));\r\n    }\r\n  }, [selectedUserId, dummyState]);\r\n\r\n  useEffect(() => {\r\n    fetch(configData.SERVER_URL + \"/api/fridgeUsers/\" + fridgeId)\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        setUsersData([\r\n          { id: \"None\", name: \"None\" },\r\n          ...json,\r\n          // { id: \"All\", name: \"All\" },\r\n        ]);\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => finishUsersLoading(false));\r\n  }, [dummyState]);\r\n\r\n  const handleChange = (e) => {\r\n    const re = /^[0-9\\b]+$/;\r\n    if (e === \"\" || re.test(e)) {\r\n      amount.current = e;\r\n    } else {\r\n      amount.current = 0;\r\n    }\r\n  };\r\n  const handleConsume = (fridgeItemId, unit) => {\r\n    console.log(amount.current);\r\n    if (amount.current < 1) {\r\n      toast.error(\"Invalid amount!\", {\r\n        position: \"bottom-center\",\r\n        autoClose: 1500,\r\n      });\r\n      return;\r\n    }\r\n    const obj = {\r\n      fridgeItemId: fridgeItemId,\r\n      userId: selectedUserId,\r\n      amountValue: {\r\n        value: amount.current,\r\n        unit: unit,\r\n      },\r\n    };\r\n\r\n    fetch(configData.SERVER_URL + \"/api/fridgeItems/\" + fridgeId + \"/consume\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          toast.error(\"Cant consume fridge item!\", {\r\n            position: \"bottom-center\",\r\n            autoClose: 1500,\r\n          });\r\n          throw Error(response.statusText);\r\n        }\r\n        toast.success(\"Consumed!\", {\r\n          position: \"bottom-center\",\r\n          autoClose: 1500,\r\n        });\r\n        amount.current = 0;\r\n        rerender(dummyState + 1);\r\n        return response;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer />\r\n      <NewUserDialog\r\n        fridgeId={fridgeId}\r\n        state={newUserDialogState}\r\n        handleClose={() => {\r\n          setNewUserDialogState(false);\r\n        }}\r\n      />\r\n      <NewFridgeItemDialog\r\n        fridgeId={fridgeId}\r\n        selectedUserId={selectedUserId}\r\n        state={newFridgeItemDialogState}\r\n        handleClose={() => {\r\n          setNewFridgeItemDialogState(false);\r\n        }}\r\n      />\r\n      {usersLoading ? (\r\n        <div>\r\n          <CircularProgress />\r\n          <p>Loading users</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"btn-group userBtns\">\r\n          {fridgeUsers.map((item) => {\r\n            return (\r\n              <Button\r\n                variant=\"contained\"\r\n                color={selectedUserId === item.id ? \"secondary\" : \"primary\"}\r\n                onClick={() => selectUser(item.id)}\r\n              >\r\n                {item.name}\r\n              </Button>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      <div>\r\n        <div className=\"btn-group userBtns\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => setNewFridgeItemDialogState(true)}\r\n          >\r\n            Add new fridge item\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => setNewUserDialogState(true)}\r\n          >\r\n            Add new user\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              rerender(dummyState + 1);\r\n            }}\r\n            startIcon={<RefreshIcon />}\r\n          >\r\n            Refresh\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n      {fridgeItemsLoading ? (\r\n        <p>Select user</p>\r\n      ) : (\r\n        <MDBTable>\r\n          <MDBTableHead columns={columns} />\r\n          <MDBTableBody rows={rows} />\r\n        </MDBTable>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    label: \"#\",\r\n    field: \"id\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Product\",\r\n    field: \"productName\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Category\",\r\n    field: \"categoryName\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Value\",\r\n    field: \"value\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Unit\",\r\n    field: \"unit\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"#\",\r\n    field: \"consume\",\r\n    sort: \"asc\",\r\n  },\r\n];\r\n\r\nexport default FridgeItemsDashboard;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFoodProductDialog.js",["77"],"import React, { useState } from \"react\";\r\nimport configData from \"../../config_url.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst NewFoodProductDialog = ({ categories, state, handleClose }) => {\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n  });\r\n  const [categoryId, setCategory] = useState(0);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const refreshForm = () => {\r\n    setValues({\r\n      name: \"\",\r\n      category: \"\",\r\n    });\r\n  };\r\n\r\n  const onSelectChange = (event, val) => {\r\n    if (val != undefined && val != null) setCategory(val.foodProductId);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const obj = {\r\n      name: values.name,\r\n      category: categoryId,\r\n    };\r\n\r\n    fetch(configData.SERVER_URL + \"/api/foodProducts\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then(function (response) {\r\n        if (!response.ok) {\r\n          if (response.status === 401) {\r\n            toast.error(\"Unauthorized operation!\", {\r\n              position: \"bottom-center\",\r\n              autoClose: 1500,\r\n            });\r\n          } else {\r\n            toast.error(\"Cant add food product!\", {\r\n              position: \"bottom-center\",\r\n              autoClose: 1500,\r\n            });\r\n          }\r\n          throw Error(response.statusText);\r\n        }\r\n        toast.success(\"Food product added!\", {\r\n          position: \"bottom-center\",\r\n          autoClose: 1500,\r\n        });\r\n        return response;\r\n      })\r\n      .then(refreshForm())\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n      .then(() => handleClose());\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ToastContainer />\r\n\r\n      <Dialog\r\n        open={state}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Add food product</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            name=\"name\"\r\n            label=\"Name\"\r\n            fullWidth\r\n            onChange={handleInputChange}\r\n            value={values.name}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Autocomplete\r\n            id=\"categories-combobox\"\r\n            options={categories}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: \"100%\" }}\r\n            onChange={onSelectChange}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Select category\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            variant=\"outlined\"\r\n            onClick={handleAdd}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewFoodProductDialog;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewUserDialog.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFridgeItemDialog.js",["78"],"import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../../config_url.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst NewFridgeItemDialog = ({\r\n  fridgeId,\r\n  selectedUserId,\r\n  state,\r\n  handleClose,\r\n}) => {\r\n  const [foodProducts, setFoodProducts] = useState([\r\n    { foodProductId: 1, foodProductName: \"fp\" },\r\n  ]);\r\n  const [foodProductId, setFoodProductId] = useState(0);\r\n  const [values, setValues] = useState({\r\n    note: \"\",\r\n    value: \"\",\r\n  });\r\n  const [unit, setUnit] = useState(\"NotAssigned\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"food products fetch\");\r\n    fetch(configData.SERVER_URL + \"/api/foodProducts\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const items = json.map((item, index) => ({\r\n          foodProductId: item.foodProductId,\r\n          foodProductName: item.foodProductName,\r\n        }));\r\n        setFoodProducts(items);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  const handleNumberChange = (e) => {\r\n    const re = /^[0-9\\b]+$/;\r\n    if (e.target.value === \"\" || re.test(e.target.value)) {\r\n      const { name, value } = e.target;\r\n      setValues({ ...values, [name]: value });\r\n    }\r\n  };\r\n\r\n  const onSelectChange = (event, val) => {\r\n    if (val != undefined && val != null) setFoodProductId(val.foodProductId);\r\n  };\r\n\r\n  const refreshForm = () => {\r\n    setValues({\r\n      note: \"\",\r\n      unit: \"\",\r\n      value: \"\",\r\n    });\r\n    setFoodProductId(0);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const obj = {\r\n      userId: selectedUserId,\r\n      fridgeItem: {\r\n        foodProductId: foodProductId,\r\n        value: parseInt(values.value),\r\n        note: \"\",\r\n        unit: unit,\r\n      },\r\n    };\r\n\r\n    fetch(configData.SERVER_URL + \"/api/fridgeItems/\" + fridgeId + \"/add\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          toast.error(\"Cant add fridge item!\", {\r\n            position: \"bottom-center\",\r\n            autoClose: 1500,\r\n          });\r\n          throw Error(response.statusText);\r\n        }\r\n        toast.success(\"Added new fridge item!\", {\r\n          position: \"bottom-center\",\r\n          autoClose: 1500,\r\n        });\r\n\r\n        return response;\r\n      })\r\n      .then(refreshForm())\r\n      .then(() => handleClose())\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ToastContainer />\r\n\r\n      <Dialog\r\n        open={state}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Add Fridge item</DialogTitle>\r\n        <DialogContent>\r\n          <Autocomplete\r\n            id=\"foodproducts-combobox\"\r\n            options={foodProducts}\r\n            getOptionLabel={(option) => option.foodProductName}\r\n            style={{ width: \"100%\" }}\r\n            onChange={onSelectChange}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Select food product\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n          <br />\r\n          <TextField\r\n            name=\"value\"\r\n            label=\"Value\"\r\n            fullWidth\r\n            onChange={handleNumberChange}\r\n            value={values.value}\r\n          />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <ToggleButtonGroup\r\n            value={unit}\r\n            exclusive\r\n            onChange={(event, unit) => {\r\n              setUnit(unit);\r\n            }}\r\n            aria-label=\"text alignment\"\r\n          >\r\n            <ToggleButton value=\"Grams\" aria-label=\"left aligned\">\r\n              <Typography variant=\"body1\">Grams</Typography>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"Pieces\" aria-label=\"centered\">\r\n              <Typography>Pieces</Typography>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"Mililiter\" aria-label=\"right aligned\">\r\n              <Typography>Mililiter</Typography>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"NotAssigned\" aria-label=\"justified\">\r\n              <Typography>None</Typography>\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n          <br />\r\n          <br />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleAdd}\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            variant=\"outlined\"\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewFridgeItemDialog;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewRecipeDialog.js",["79","80","81","82","83","84","85"],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":9,"column":8,"nodeType":"92","messageId":"93","endLine":9,"endColumn":12},{"ruleId":"90","severity":1,"message":"94","line":67,"column":17,"nodeType":"92","messageId":"93","endLine":67,"endColumn":20},{"ruleId":"95","severity":1,"message":"96","line":133,"column":6,"nodeType":"97","endLine":133,"endColumn":18,"suggestions":"98"},{"ruleId":"90","severity":1,"message":"99","line":2,"column":27,"nodeType":"92","messageId":"93","endLine":2,"endColumn":33},{"ruleId":"90","severity":1,"message":"100","line":2,"column":35,"nodeType":"92","messageId":"93","endLine":2,"endColumn":41},{"ruleId":"90","severity":1,"message":"101","line":2,"column":43,"nodeType":"92","messageId":"93","endLine":2,"endColumn":48},{"ruleId":"90","severity":1,"message":"102","line":7,"column":8,"nodeType":"92","messageId":"93","endLine":7,"endColumn":16},{"ruleId":"103","severity":1,"message":"104","line":51,"column":24,"nodeType":"105","messageId":"106","endLine":51,"endColumn":26},{"ruleId":"95","severity":1,"message":"107","line":92,"column":6,"nodeType":"97","endLine":92,"endColumn":34,"suggestions":"108"},{"ruleId":"95","severity":1,"message":"109","line":106,"column":6,"nodeType":"97","endLine":106,"endColumn":18,"suggestions":"110"},{"ruleId":"103","severity":1,"message":"104","line":34,"column":13,"nodeType":"105","messageId":"106","endLine":34,"endColumn":15},{"ruleId":"103","severity":1,"message":"104","line":60,"column":13,"nodeType":"105","messageId":"106","endLine":60,"endColumn":15},{"ruleId":"90","severity":1,"message":"111","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"112","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":18},{"ruleId":"90","severity":1,"message":"113","line":11,"column":8,"nodeType":"92","messageId":"93","endLine":11,"endColumn":20},{"ruleId":"90","severity":1,"message":"114","line":15,"column":8,"nodeType":"92","messageId":"93","endLine":15,"endColumn":20},{"ruleId":"90","severity":1,"message":"115","line":16,"column":8,"nodeType":"92","messageId":"93","endLine":16,"endColumn":25},{"ruleId":"90","severity":1,"message":"116","line":17,"column":8,"nodeType":"92","messageId":"93","endLine":17,"endColumn":18},{"ruleId":"90","severity":1,"message":"117","line":19,"column":26,"nodeType":"92","messageId":"93","endLine":19,"endColumn":31},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'key' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleClickOpen'. Either include it or remove the dependency array.","ArrayExpression",["120"],"'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'SnackBar' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'fridgeId' and 'handleConsume'. Either include them or remove the dependency array.",["121"],"React Hook useEffect has a missing dependency: 'fridgeId'. Either include it or remove the dependency array.",["122"],"'useEffect' is defined but never used.","'configData' is defined but never used.","'Autocomplete' is defined but never used.","'ToggleButton' is defined but never used.","'ToggleButtonGroup' is defined but never used.","'Typography' is defined but never used.","'toast' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [dummyState, handleClickOpen]",{"range":"129","text":"130"},"Update the dependencies array to be: [selectedUserId, dummyState, fridgeId, handleConsume]",{"range":"131","text":"132"},"Update the dependencies array to be: [dummyState, fridgeId]",{"range":"133","text":"134"},[4181,4193],"[dummyState, handleClickOpen]",[3059,3087],"[selectedUserId, dummyState, fridgeId, handleConsume]",[3502,3514],"[dummyState, fridgeId]"]