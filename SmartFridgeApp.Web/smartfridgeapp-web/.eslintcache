[{"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\index.js":"1","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\reportWebVitals.js":"2","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\App.js":"3","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\Recipes.js":"4","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\Header.js":"5","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FoodProducts.js":"6","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgesDashboard.js":"7","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgeItemsDashboard.js":"8","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFoodProductDialog.js":"9","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewUserDialog.js":"10","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFridgeItemDialog.js":"11","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewRecipeDialog.js":"12","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\FoodProductInput.js":"13"},{"size":663,"mtime":1609674096686,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":1102,"mtime":1610190771995,"results":"17","hashOfConfig":"15"},{"size":7204,"mtime":1610190915741,"results":"18","hashOfConfig":"15"},{"size":677,"mtime":1609674096682,"results":"19","hashOfConfig":"15"},{"size":3053,"mtime":1609674096688,"results":"20","hashOfConfig":"15"},{"size":7103,"mtime":1609710698114,"results":"21","hashOfConfig":"15"},{"size":7408,"mtime":1609710698113,"results":"22","hashOfConfig":"15"},{"size":3862,"mtime":1609710698111,"results":"23","hashOfConfig":"15"},{"size":3067,"mtime":1609710698112,"results":"24","hashOfConfig":"15"},{"size":5584,"mtime":1609710698111,"results":"25","hashOfConfig":"15"},{"size":7849,"mtime":1610192472003,"results":"26","hashOfConfig":"15"},{"size":2655,"mtime":1610192030234,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"g2d47k",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\index.js",[],["60","61"],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\reportWebVitals.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\App.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\Recipes.js",["62","63"],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\Header.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FoodProducts.js",["64"],"import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../config_url.json\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\nimport NewFoodProductDialog from \"../components/dialogs/NewFoodProductDialog\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport SnackBar from \"@material-ui/core/Snackbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst FoodProducts = () => {\r\n  const [dataLoading, finishLoading] = useState(true);\r\n  const [newFoodProductDialog, setNewFoodProductDialog] = useState(false);\r\n  const [categories, setCategories] = useState({\r\n    name: \"categoryName\",\r\n    categoryId: 1,\r\n  });\r\n\r\n  const [dummyState, rerender] = useState(1);\r\n  const handleRefresh = () => {\r\n    rerender(dummyState + 1);\r\n  };\r\n\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"foodProducts\",\r\n      category: \"category\",\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    fetch(configData.SERVER_URL + \"/api/foodproducts\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item, index) => ({\r\n          id: index + 1,\r\n          name: item.foodProductName,\r\n          category: item.foodProductCategory,\r\n        }));\r\n\r\n        setRows(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => finishLoading(false));\r\n\r\n    fetch(configData.SERVER_URL + \"/api/foodproducts/categories\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item) => ({\r\n          name: item.name,\r\n          categoryId: item.categoryId,\r\n        }));\r\n\r\n        setCategories(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, [dummyState]);\r\n\r\n  const handleCloseNewFoodProductDialog = () => {\r\n    setNewFoodProductDialog(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NewFoodProductDialog\r\n        categories={categories}\r\n        state={newFoodProductDialog}\r\n        handleClose={handleCloseNewFoodProductDialog}\r\n      />\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={() => setNewFoodProductDialog(true)}\r\n      >\r\n        Add new food product\r\n      </Button>\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={handleRefresh}\r\n        startIcon={<RefreshIcon />}\r\n      >\r\n        Refresh\r\n      </Button>\r\n      {dataLoading ? (\r\n        <div>\r\n          <CircularProgress />\r\n          <p>Loading food products</p>\r\n        </div>\r\n      ) : (\r\n        <MDBTable btn>\r\n          <MDBTableHead columns={columns} />\r\n          <MDBTableBody rows={rows} />\r\n        </MDBTable>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    label: \"#\",\r\n    field: \"id\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Name\",\r\n    field: \"name\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Category\",\r\n    field: \"category\",\r\n    sort: \"asc\",\r\n  },\r\n];\r\n\r\nexport default FoodProducts;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgesDashboard.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\pages\\FridgeItemsDashboard.js",["65","66","67"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport configData from \"../config_url.json\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FastfoodIcon from \"@material-ui/icons/Fastfood\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport NumericInput from \"react-numeric-input\";\r\nimport NewUserDialog from \"../components/dialogs/NewUserDialog\";\r\nimport NewFridgeItemDialog from \"../components/dialogs/NewFridgeItemDialog\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst FridgeItemsDashboard = () => {\r\n  const { fridgeId } = useParams();\r\n  const [dummyState, rerender] = useState(1);\r\n  const [newUserDialogState, setNewUserDialogState] = useState(false);\r\n  const [newFridgeItemDialogState, setNewFridgeItemDialogState] = useState(\r\n    false\r\n  );\r\n  const amount = useRef(0);\r\n  const [usersLoading, finishUsersLoading] = useState(true);\r\n  const [fridgeItemsLoading, finishFridgeItemsLoading] = useState(true);\r\n  const [fridgeUsers, setUsersData] = useState([]);\r\n  const [selectedUserId, selectUser] = useState(\"None\");\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: 1,\r\n      categoryName: \"category\",\r\n      productName: \"product\",\r\n      value: 10,\r\n      unit: \"unit\",\r\n      consume: (\r\n        <span>\r\n          <NumericInput min={0} max={100} />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<FastfoodIcon />}\r\n          >\r\n            Consume\r\n          </Button>\r\n        </span>\r\n      ),\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (selectedUserId != \"None\") {\r\n      fetch(\r\n        configData.SERVER_URL +\r\n          \"/api/fridgeItems/\" +\r\n          fridgeId +\r\n          \"/\" +\r\n          selectedUserId\r\n      )\r\n        .then((response) => response.json())\r\n        .then((json) => {\r\n          const rowsArray = json.map((item, index) => ({\r\n            id: index + 1,\r\n            productName: item.productName,\r\n            categoryName: item.categoryName,\r\n            value: item.value,\r\n            unit: item.unit,\r\n            consume: (\r\n              <span>\r\n                <NumericInput\r\n                  min={0}\r\n                  max={10000}\r\n                  value={amount.curent}\r\n                  onChange={handleChange}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<FastfoodIcon />}\r\n                  onClick={() => handleConsume(item.fridgeItemId, item.unit)}\r\n                >\r\n                  Consume\r\n                </Button>\r\n              </span>\r\n            ),\r\n          }));\r\n\r\n          setRows(rowsArray);\r\n        })\r\n        .catch((error) => console.error(error))\r\n        .finally(() => finishFridgeItemsLoading(false));\r\n    }\r\n  }, [selectedUserId, dummyState]);\r\n\r\n  useEffect(() => {\r\n    fetch(configData.SERVER_URL + \"/api/fridgeUsers/\" + fridgeId)\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        setUsersData([\r\n          { id: \"None\", name: \"None\" },\r\n          ...json,\r\n          // { id: \"All\", name: \"All\" },\r\n        ]);\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => finishUsersLoading(false));\r\n  }, [dummyState]);\r\n\r\n  const handleChange = (e) => {\r\n    const re = /^[0-9\\b]+$/;\r\n    if (e === \"\" || re.test(e)) {\r\n      amount.current = e;\r\n    } else {\r\n      amount.current = 0;\r\n    }\r\n  };\r\n  const handleConsume = (fridgeItemId, unit) => {\r\n    console.log(amount.current);\r\n    if (amount.current < 1) {\r\n      toast.error(\"Invalid amount!\", {\r\n        position: \"bottom-center\",\r\n        autoClose: 1500,\r\n      });\r\n      return;\r\n    }\r\n    const obj = {\r\n      fridgeItemId: fridgeItemId,\r\n      userId: selectedUserId,\r\n      amountValue: {\r\n        value: amount.current,\r\n        unit: unit,\r\n      },\r\n    };\r\n\r\n    fetch(configData.SERVER_URL + \"/api/fridgeItems/\" + fridgeId + \"/consume\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          toast.error(\"Cant consume fridge item!\", {\r\n            position: \"bottom-center\",\r\n            autoClose: 1500,\r\n          });\r\n          throw Error(response.statusText);\r\n        }\r\n        toast.success(\"Consumed!\", {\r\n          position: \"bottom-center\",\r\n          autoClose: 1500,\r\n        });\r\n        amount.current = 0;\r\n        rerender(dummyState + 1);\r\n        return response;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer />\r\n      <NewUserDialog\r\n        fridgeId={fridgeId}\r\n        state={newUserDialogState}\r\n        handleClose={() => {\r\n          setNewUserDialogState(false);\r\n        }}\r\n      />\r\n      <NewFridgeItemDialog\r\n        fridgeId={fridgeId}\r\n        selectedUserId={selectedUserId}\r\n        state={newFridgeItemDialogState}\r\n        handleClose={() => {\r\n          setNewFridgeItemDialogState(false);\r\n        }}\r\n      />\r\n      {usersLoading ? (\r\n        <div>\r\n          <CircularProgress />\r\n          <p>Loading users</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"btn-group userBtns\">\r\n          {fridgeUsers.map((item) => {\r\n            return (\r\n              <Button\r\n                variant=\"contained\"\r\n                color={selectedUserId === item.id ? \"secondary\" : \"primary\"}\r\n                onClick={() => selectUser(item.id)}\r\n              >\r\n                {item.name}\r\n              </Button>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      <div>\r\n        <div className=\"btn-group userBtns\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => setNewFridgeItemDialogState(true)}\r\n          >\r\n            Add new fridge item\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => setNewUserDialogState(true)}\r\n          >\r\n            Add new user\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              rerender(dummyState + 1);\r\n            }}\r\n            startIcon={<RefreshIcon />}\r\n          >\r\n            Refresh\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n      {fridgeItemsLoading ? (\r\n        <p>Select user</p>\r\n      ) : (\r\n        <MDBTable>\r\n          <MDBTableHead columns={columns} />\r\n          <MDBTableBody rows={rows} />\r\n        </MDBTable>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    label: \"#\",\r\n    field: \"id\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Product\",\r\n    field: \"productName\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Category\",\r\n    field: \"categoryName\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Value\",\r\n    field: \"value\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Unit\",\r\n    field: \"unit\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"#\",\r\n    field: \"consume\",\r\n    sort: \"asc\",\r\n  },\r\n];\r\n\r\nexport default FridgeItemsDashboard;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFoodProductDialog.js",["68"],"import React, { useState } from \"react\";\r\nimport configData from \"../../config_url.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst NewFoodProductDialog = ({ categories, state, handleClose }) => {\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n  });\r\n  const [categoryId, setCategory] = useState(0);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const refreshForm = () => {\r\n    setValues({\r\n      name: \"\",\r\n      category: \"\",\r\n    });\r\n  };\r\n\r\n  const onSelectChange = (event, val) => {\r\n    if (val != undefined && val != null) setCategory(val.foodProductId);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const obj = {\r\n      name: values.name,\r\n      category: categoryId,\r\n    };\r\n\r\n    fetch(configData.SERVER_URL + \"/api/foodProducts\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then(function (response) {\r\n        if (!response.ok) {\r\n          if (response.status === 401) {\r\n            toast.error(\"Unauthorized operation!\", {\r\n              position: \"bottom-center\",\r\n              autoClose: 1500,\r\n            });\r\n          } else {\r\n            toast.error(\"Cant add food product!\", {\r\n              position: \"bottom-center\",\r\n              autoClose: 1500,\r\n            });\r\n          }\r\n          throw Error(response.statusText);\r\n        }\r\n        toast.success(\"Food product added!\", {\r\n          position: \"bottom-center\",\r\n          autoClose: 1500,\r\n        });\r\n        return response;\r\n      })\r\n      .then(refreshForm())\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n      .then(() => handleClose());\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ToastContainer />\r\n\r\n      <Dialog\r\n        open={state}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Add food product</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            name=\"name\"\r\n            label=\"Name\"\r\n            fullWidth\r\n            onChange={handleInputChange}\r\n            value={values.name}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Autocomplete\r\n            id=\"categories-combobox\"\r\n            options={categories}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: \"100%\" }}\r\n            onChange={onSelectChange}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Select category\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            variant=\"outlined\"\r\n            onClick={handleAdd}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewFoodProductDialog;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewUserDialog.js",[],"P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewFridgeItemDialog.js",["69"],"import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../../config_url.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst NewFridgeItemDialog = ({\r\n  fridgeId,\r\n  selectedUserId,\r\n  state,\r\n  handleClose,\r\n}) => {\r\n  const [foodProducts, setFoodProducts] = useState([\r\n    { foodProductId: 1, foodProductName: \"fp\" },\r\n  ]);\r\n  const [foodProductId, setFoodProductId] = useState(0);\r\n  const [values, setValues] = useState({\r\n    note: \"\",\r\n    value: \"\",\r\n  });\r\n  const [unit, setUnit] = useState(\"NotAssigned\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"food products fetch\");\r\n    fetch(configData.SERVER_URL + \"/api/foodProducts\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const items = json.map((item, index) => ({\r\n          foodProductId: item.foodProductId,\r\n          foodProductName: item.foodProductName,\r\n        }));\r\n        setFoodProducts(items);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  const handleNumberChange = (e) => {\r\n    const re = /^[0-9\\b]+$/;\r\n    if (e.target.value === \"\" || re.test(e.target.value)) {\r\n      const { name, value } = e.target;\r\n      setValues({ ...values, [name]: value });\r\n    }\r\n  };\r\n\r\n  const onSelectChange = (event, val) => {\r\n    if (val != undefined && val != null) setFoodProductId(val.foodProductId);\r\n  };\r\n\r\n  const refreshForm = () => {\r\n    setValues({\r\n      note: \"\",\r\n      unit: \"\",\r\n      value: \"\",\r\n    });\r\n    setFoodProductId(0);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const obj = {\r\n      userId: selectedUserId,\r\n      fridgeItem: {\r\n        foodProductId: foodProductId,\r\n        value: parseInt(values.value),\r\n        note: \"\",\r\n        unit: unit,\r\n      },\r\n    };\r\n\r\n    fetch(configData.SERVER_URL + \"/api/fridgeItems/\" + fridgeId + \"/add\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          toast.error(\"Cant add fridge item!\", {\r\n            position: \"bottom-center\",\r\n            autoClose: 1500,\r\n          });\r\n          throw Error(response.statusText);\r\n        }\r\n        toast.success(\"Added new fridge item!\", {\r\n          position: \"bottom-center\",\r\n          autoClose: 1500,\r\n        });\r\n\r\n        return response;\r\n      })\r\n      .then(refreshForm())\r\n      .then(() => handleClose())\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ToastContainer />\r\n\r\n      <Dialog\r\n        open={state}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Add Fridge item</DialogTitle>\r\n        <DialogContent>\r\n          <Autocomplete\r\n            id=\"foodproducts-combobox\"\r\n            options={foodProducts}\r\n            getOptionLabel={(option) => option.foodProductName}\r\n            style={{ width: \"100%\" }}\r\n            onChange={onSelectChange}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Select food product\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n          <br />\r\n          <TextField\r\n            name=\"value\"\r\n            label=\"Value\"\r\n            fullWidth\r\n            onChange={handleNumberChange}\r\n            value={values.value}\r\n          />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <ToggleButtonGroup\r\n            value={unit}\r\n            exclusive\r\n            onChange={(event, unit) => {\r\n              setUnit(unit);\r\n            }}\r\n            aria-label=\"text alignment\"\r\n          >\r\n            <ToggleButton value=\"Grams\" aria-label=\"left aligned\">\r\n              <Typography variant=\"body1\">Grams</Typography>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"Pieces\" aria-label=\"centered\">\r\n              <Typography>Pieces</Typography>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"Mililiter\" aria-label=\"right aligned\">\r\n              <Typography>Mililiter</Typography>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"NotAssigned\" aria-label=\"justified\">\r\n              <Typography>None</Typography>\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n          <br />\r\n          <br />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleAdd}\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            variant=\"outlined\"\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewFridgeItemDialog;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\dialogs\\NewRecipeDialog.js",["70","71"],"import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../../config_url.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport FoodProductInput from \"../FoodProductInput\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst NewRecipeDialog = ({ state, handleClose }) => {\r\n  const [recipeName, setRecipeName] = useState(\"\");\r\n  const [recipeDesc, setRecipeDesc] = useState(\"\");\r\n  const [recipeCategory, setRecipeCategory] = useState(\"\");\r\n  const [levelOfDifficulty, setDifficulty] = useState(\"\");\r\n  const [requiredTime, setRequiredTime] = useState(\"\");\r\n\r\n  const [foodProducts, setFoodProducts] = useState([\r\n    { foodProductId: 1, foodProductName: \"fp\" },\r\n  ]);\r\n  const [inputList, setInputList] = useState([\r\n    { foodProductId: 0, foodProductName: \"\", amount: \"\" },\r\n  ]);\r\n\r\n  // const handleInputChange = (e, index) => {\r\n  //   const { name, value } = e.target;\r\n  //   const list = [...inputList];\r\n  //   list[index][name] = value;\r\n  //   setInputList(list);\r\n  // };\r\n\r\n  // const handleRemoveClick = (index) => {\r\n  //   const list = [...inputList];\r\n  //   list.splice(index, 1);\r\n  //   setInputList(list);\r\n  // };\r\n\r\n  // const handleAddClick = () => {\r\n  //   setInputList([\r\n  //     ...inputList,\r\n  //     { foodProductId: 0, foodProductName: \"\", amount: \"\" },\r\n  //   ]);\r\n  // };\r\n\r\n  useEffect(() => {\r\n    console.log(\"food products fetch\");\r\n    fetch(configData.SERVER_URL + \"/api/foodProducts\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const items = json.map((item, index) => ({\r\n          foodProductId: item.foodProductId,\r\n          foodProductName: item.foodProductName,\r\n        }));\r\n        setFoodProducts(items);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  //   useEffect(() => {\r\n  //     // fetch(configData.SERVER_URL + \"/api/recipes\")\r\n  //     //   .then((response) => response.json())\r\n  //     //   .then((json) => {\r\n  //     //     const items = json.map((item, index) => ({\r\n  //     //       foodProductId: item.foodProductId,\r\n  //     //       foodProductName: item.foodProductName,\r\n  //     //     }));\r\n  //     //     setFoodProducts(items);\r\n  //     //   })\r\n  //     //   .catch((error) => console.error(error));\r\n  //   }, []);\r\n\r\n  const refreshForm = () => {\r\n    setRecipeName(\"\");\r\n    setRecipeDesc(\"\");\r\n    setRecipeCategory(\"\");\r\n    setDifficulty(\"\");\r\n    setRequiredTime(\"\");\r\n    setInputList([{ foodProductId: 0, foodProductName: \"\", amount: \"\" }]);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const products = [];\r\n    inputList.map((item) => {\r\n      const newProduct = {\r\n        foodProductId: item.foodProductId,\r\n        amountValue: { value: parseInt(item.amount), unit: \"NotAssigned\" },\r\n      };\r\n      products.push(newProduct);\r\n      return true;\r\n    });\r\n\r\n    const obj = {\r\n      name: recipeName,\r\n      description: recipeDesc,\r\n      recipeCategory: parseInt(recipeCategory),\r\n      requiredTime: parseInt(requiredTime),\r\n      levelOfDifficulty: parseInt(levelOfDifficulty),\r\n      products: products,\r\n    };\r\n\r\n    console.log(obj);\r\n\r\n    fetch(configData.SERVER_URL + \"/api/recipes/\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          toast.error(\"Cant add recipe!\", {\r\n            position: \"bottom-center\",\r\n            autoClose: 1500,\r\n          });\r\n          throw Error(response.statusText);\r\n        }\r\n        toast.success(\"Added new recipe!\", {\r\n          position: \"bottom-center\",\r\n          autoClose: 1500,\r\n        });\r\n\r\n        return response;\r\n      })\r\n      .then(refreshForm())\r\n      .then(() => handleClose())\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ToastContainer />\r\n\r\n      <Dialog\r\n        open={state}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Add Recipe</DialogTitle>\r\n        <DialogActions></DialogActions>\r\n        <DialogContent>\r\n          <FoodProductInput\r\n            foodProducts={foodProducts}\r\n            inputList={inputList}\r\n            setInputList={setInputList}\r\n          />\r\n          <TextField\r\n            name=\"recipeName\"\r\n            label=\"Recipe name\"\r\n            fullWidth\r\n            onChange={(e) => {\r\n              setRecipeName(e.target.value);\r\n            }}\r\n            value={recipeName}\r\n          />\r\n          <TextField\r\n            name=\"recipeDesc\"\r\n            label=\"Description\"\r\n            fullWidth\r\n            onChange={(e) => {\r\n              setRecipeDesc(e.target.value);\r\n            }}\r\n            value={recipeDesc}\r\n          />\r\n          <br />\r\n          <br />\r\n          <ToggleButtonGroup\r\n            value={levelOfDifficulty}\r\n            exclusive\r\n            onChange={(event, diff) => {\r\n              setDifficulty(diff);\r\n            }}\r\n            aria-label=\"text alignment\"\r\n          >\r\n            <ToggleButton value=\"1\" aria-label=\"left aligned\">\r\n              <Typography>Easy</Typography>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"2\" aria-label=\"centered\">\r\n              <Typography>Medium</Typography>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"3\" aria-label=\"right aligned\">\r\n              <Typography>Hard</Typography>\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n          <br /> <br />\r\n          <ToggleButtonGroup\r\n            value={recipeCategory}\r\n            exclusive\r\n            onChange={(event, cat) => {\r\n              setRecipeCategory(cat);\r\n            }}\r\n            aria-label=\"text alignment\"\r\n          >\r\n            <ToggleButton value=\"1\" aria-label=\"centered\">\r\n              <Typography>Breakfast</Typography>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"2\" aria-label=\"left aligned\">\r\n              <Typography>Dinner</Typography>\r\n            </ToggleButton>\r\n\r\n            <ToggleButton value=\"3\" aria-label=\"right aligned\">\r\n              <Typography>Supper</Typography>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"4\" aria-label=\"right aligned\">\r\n              <Typography>Other</Typography>\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n          <TextField\r\n            name=\"requiredTime\"\r\n            label=\"Required time\"\r\n            fullWidth\r\n            onChange={(e) => {\r\n              setRequiredTime(e.target.value);\r\n            }}\r\n            value={requiredTime}\r\n          />\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleAdd}\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            variant=\"outlined\"\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewRecipeDialog;\r\n","P:\\Projekty\\SmartFridgeApp\\SmartFridgeApp.Web\\smartfridgeapp-web\\src\\components\\FoodProductInput.js",["72","73","74","75","76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":67,"column":17,"nodeType":"83","messageId":"84","endLine":67,"endColumn":20},{"ruleId":"85","severity":1,"message":"86","line":133,"column":6,"nodeType":"87","endLine":133,"endColumn":18,"suggestions":"88"},{"ruleId":"81","severity":1,"message":"89","line":7,"column":8,"nodeType":"83","messageId":"84","endLine":7,"endColumn":16},{"ruleId":"90","severity":1,"message":"91","line":51,"column":24,"nodeType":"92","messageId":"93","endLine":51,"endColumn":26},{"ruleId":"85","severity":1,"message":"94","line":92,"column":6,"nodeType":"87","endLine":92,"endColumn":34,"suggestions":"95"},{"ruleId":"85","severity":1,"message":"96","line":106,"column":6,"nodeType":"87","endLine":106,"endColumn":18,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"91","line":34,"column":13,"nodeType":"92","messageId":"93","endLine":34,"endColumn":15},{"ruleId":"90","severity":1,"message":"91","line":60,"column":13,"nodeType":"92","messageId":"93","endLine":60,"endColumn":15},{"ruleId":"81","severity":1,"message":"98","line":11,"column":8,"nodeType":"83","messageId":"84","endLine":11,"endColumn":20},{"ruleId":"81","severity":1,"message":"99","line":13,"column":8,"nodeType":"83","messageId":"84","endLine":13,"endColumn":18},{"ruleId":"81","severity":1,"message":"100","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":25},{"ruleId":"81","severity":1,"message":"101","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"102","line":9,"column":8,"nodeType":"83","messageId":"84","endLine":9,"endColumn":20},{"ruleId":"81","severity":1,"message":"103","line":10,"column":8,"nodeType":"83","messageId":"84","endLine":10,"endColumn":25},{"ruleId":"81","severity":1,"message":"104","line":11,"column":8,"nodeType":"83","messageId":"84","endLine":11,"endColumn":18},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleClickOpen'. Either include it or remove the dependency array.","ArrayExpression",["107"],"'SnackBar' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'fridgeId' and 'handleConsume'. Either include them or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'fridgeId'. Either include it or remove the dependency array.",["109"],"'Autocomplete' is defined but never used.","'RemoveIcon' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'ToggleButton' is defined but never used.","'ToggleButtonGroup' is defined but never used.","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [dummyState, handleClickOpen]",{"range":"116","text":"117"},"Update the dependencies array to be: [selectedUserId, dummyState, fridgeId, handleConsume]",{"range":"118","text":"119"},"Update the dependencies array to be: [dummyState, fridgeId]",{"range":"120","text":"121"},[4181,4193],"[dummyState, handleClickOpen]",[3059,3087],"[selectedUserId, dummyState, fridgeId, handleConsume]",[3502,3514],"[dummyState, fridgeId]"]