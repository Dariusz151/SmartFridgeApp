{"version":3,"sources":["pages/About.js","pages/FridgesDashboard.js","components/dialogs/NewUserDialog.js","components/dialogs/NewFridgeItemDialog.js","pages/FridgeItemsDashboard.js","components/dialogs/NewFoodProductDialog.js","pages/FoodProducts.js","pages/Recipes.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["About","className","to","columns","label","field","sort","FridgesDashboard","useState","dataLoading","finishLoading","dummyState","rerender","open","setOpen","name","address","desc","values","setValues","id","buttons","delete","Button","rows","setRows","handleInputChange","e","target","value","handleClose","refreshForm","useEffect","fetch","configData","SERVER_URL","then","response","json","rowsArray","map","item","index","variant","color","startIcon","onClick","fridgeId","obj","method","headers","body","JSON","stringify","handleDelete","catch","error","console","finally","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","fullWidth","onChange","DialogActions","CircularProgress","btn","NewUserDialog","state","email","user","NewFridgeItemDialog","selectedUserId","foodProductId","foodProductName","foodProducts","setFoodProducts","setFoodProductId","note","unit","setUnit","log","items","Autocomplete","options","getOptionLabel","option","style","width","event","val","undefined","renderInput","params","test","ToggleButtonGroup","exclusive","aria-label","ToggleButton","Typography","userId","fridgeItem","parseInt","FridgeItemsDashboard","useParams","newUserDialogState","setNewUserDialogState","newFridgeItemDialogState","setNewFridgeItemDialogState","amount","usersLoading","finishUsersLoading","fridgeItemsLoading","finishFridgeItemsLoading","fridgeUsers","setUsersData","selectUser","categoryName","productName","consume","gradient","size","handleNumberChange","handleConsume","fridgeItemId","amountValue","NewFoodProductDialog","categories","categoryId","setCategory","toastify","toast","Fragment","category","ok","Error","statusText","FoodProducts","newFoodProductDialog","setNewFoodProductDialog","setCategories","foodProductCategory","Recipes","reqTime","difficulty","details","recipeName","recipeDescription","recipeDetails","setRecipeDetails","AmountValue","Value","Unit","foodProductsFormatted","setFoodProductsFormatted","handleClickOpen","foodProds","foodProductsString","foodProductsList","parse","ArrayOfFoodProductDetails","FoodProductDetails","oldArray","FoodProductId","FoodProductName","Object","entries","formatFoodProducts","recipeCategory","requiredTime","levelOfDifficulty","description","dividers","List","component","foodProduct","ListItem","ListItemText","DialogContentText","Header","activeClassName","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.405d7d74.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"About\">\r\n      <h1>About page</h1>\r\n      {/* <Link\r\n        className=\"btn btn-primary\"\r\n        to={{\r\n          pathname: \"/fridgeitems\",\r\n          state: 1,\r\n        }}\r\n      >\r\n        Send 1\r\n      </Link> */}\r\n      <Link to=\"/\">Go to Home page</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../config_url.json\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\nimport { Link } from \"react-router-dom\";\r\nimport KitchenIcon from \"@material-ui/icons/Kitchen\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\n\r\nconst FridgesDashboard = () => {\r\n  const [dataLoading, finishLoading] = useState(true);\r\n  const [dummyState, rerender] = useState(1);\r\n  const [open, setOpen] = useState(false);\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    address: \"\",\r\n    desc: \"\",\r\n  });\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"fridge\",\r\n      address: \"\",\r\n      buttons: <Link to=\"/\" />,\r\n      delete: <Button></Button>,\r\n    },\r\n  ]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    rerender(dummyState + 1);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    refreshForm();\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const obj = {\r\n      name: values.name,\r\n      address: values.address,\r\n      desc: values.desc,\r\n    };\r\n    fetch(configData.SERVER_URL + \"/api/fridges\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then(refreshForm())\r\n      .then(setOpen(false));\r\n  };\r\n\r\n  const handleDelete = (fridgeId) => {\r\n    const obj = {\r\n      fridgeId: fridgeId,\r\n    };\r\n\r\n    fetch(configData.SERVER_URL + \"/api/fridges\", {\r\n      method: \"delete\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    });\r\n  };\r\n\r\n  const refreshForm = () => {\r\n    setValues({\r\n      name: \"\",\r\n      address: \"\",\r\n      desc: \"\",\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(configData.SERVER_URL + \"/api/fridges\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item, index) => ({\r\n          id: index + 1,\r\n          name: item.name,\r\n          address: item.address,\r\n          buttons: (\r\n            <Link to={`/fridgeitems/${item.id}`}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<KitchenIcon />}\r\n              >\r\n                Details\r\n              </Button>\r\n            </Link>\r\n          ),\r\n          delete: (\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              startIcon={<DeleteIcon />}\r\n              onClick={() => handleDelete(item.id)}\r\n            >\r\n              Remove\r\n            </Button>\r\n          ),\r\n        }));\r\n\r\n        setRows(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => finishLoading(false));\r\n  }, [dummyState]);\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Add new Fridge</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            name=\"name\"\r\n            label=\"Fridge name\"\r\n            fullWidth\r\n            onChange={handleInputChange}\r\n            value={values.name}\r\n          />\r\n          <TextField\r\n            name=\"address\"\r\n            label=\"Address\"\r\n            fullWidth\r\n            onChange={handleInputChange}\r\n            value={values.address}\r\n          />\r\n          <TextField\r\n            name=\"desc\"\r\n            label=\"Description\"\r\n            fullWidth\r\n            onChange={handleInputChange}\r\n            value={values.desc}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleAdd}\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            variant=\"outlined\"\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <br />\r\n      <div className=\"btn-group userBtns\">\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          onClick={handleClickOpen}\r\n          startIcon={<AddIcon />}\r\n        >\r\n          Add new\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          onClick={handleRefresh}\r\n          startIcon={<RefreshIcon />}\r\n        >\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n\r\n      <br />\r\n      <br />\r\n      {dataLoading ? (\r\n        <div>\r\n          <CircularProgress />\r\n          <p>Loading fridges</p>\r\n        </div>\r\n      ) : (\r\n        <MDBTable btn>\r\n          <MDBTableHead columns={columns} />\r\n          <MDBTableBody rows={rows} />\r\n        </MDBTable>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    label: \"#\",\r\n    field: \"id\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Name\",\r\n    field: \"name\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Address\",\r\n    field: \"address\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"\",\r\n    field: \"buttons\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"\",\r\n    field: \"delete\",\r\n    sort: \"asc\",\r\n  },\r\n];\r\n\r\nexport default FridgesDashboard;\r\n","import React, { useState } from \"react\";\r\nimport configData from \"../../config_url.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst NewUserDialog = ({ fridgeId, state, handleClose }) => {\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const refreshForm = () => {\r\n    setValues({\r\n      name: \"\",\r\n      email: \"\",\r\n    });\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const obj = {\r\n      user: { name: values.name, email: values.email },\r\n    };\r\n\r\n    fetch(configData.SERVER_URL + \"/api/fridgeUsers/\" + fridgeId, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then(refreshForm())\r\n      .then(() => handleClose());\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={state}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <DialogTitle id=\"form-dialog-title\">Add user</DialogTitle>\r\n      <DialogContent>\r\n        <TextField\r\n          name=\"name\"\r\n          label=\"Name\"\r\n          fullWidth\r\n          onChange={handleInputChange}\r\n          value={values.name}\r\n        />\r\n        <TextField\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          fullWidth\r\n          onChange={handleInputChange}\r\n          value={values.email}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={handleClose}\r\n          color=\"secondary\"\r\n          variant=\"outlined\"\r\n          startIcon={<CloseIcon />}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          color=\"primary\"\r\n          startIcon={<AddIcon />}\r\n          variant=\"outlined\"\r\n          onClick={handleAdd}\r\n        >\r\n          Add\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default NewUserDialog;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../../config_url.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst NewFridgeItemDialog = ({\r\n  fridgeId,\r\n  selectedUserId,\r\n  state,\r\n  handleClose,\r\n}) => {\r\n  const [foodProducts, setFoodProducts] = useState([\r\n    { foodProductId: 1, foodProductName: \"fp\" },\r\n  ]);\r\n  const [foodProductId, setFoodProductId] = useState(0);\r\n  const [values, setValues] = useState({\r\n    note: \"\",\r\n    value: \"\",\r\n  });\r\n  const [unit, setUnit] = useState(\"NotAssigned\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"food products fetch\");\r\n    fetch(configData.SERVER_URL + \"/api/foodProducts\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const items = json.map((item, index) => ({\r\n          foodProductId: item.foodProductId,\r\n          foodProductName: item.foodProductName,\r\n        }));\r\n        setFoodProducts(items);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const re = /^[0-9\\b]+$/;\r\n    if (e.target.value === \"\" || re.test(e.target.value)) {\r\n      const { name, value } = e.target;\r\n      setValues({ ...values, [name]: value });\r\n    }\r\n  };\r\n\r\n  const handleUnit = (event, unit) => {\r\n    setUnit(unit);\r\n  };\r\n\r\n  const onSelectChange = (event, val) => {\r\n    if (val != undefined && val != null) setFoodProductId(val.foodProductId);\r\n  };\r\n\r\n  const refreshForm = () => {\r\n    setValues({\r\n      note: \"\",\r\n      unit: \"\",\r\n      value: \"\",\r\n    });\r\n    setFoodProductId(0);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const obj = {\r\n      userId: selectedUserId,\r\n      fridgeItem: {\r\n        foodProductId: foodProductId,\r\n        value: parseInt(values.value),\r\n        note: \"\",\r\n        unit: unit,\r\n      },\r\n    };\r\n    console.log(obj);\r\n\r\n    //if (obj.value != NaN && obj.value > 0) {\r\n    fetch(configData.SERVER_URL + \"/api/fridgeItems/\" + fridgeId + \"/add\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then(refreshForm())\r\n      .then(console.log(\"Success\"))\r\n      .then(() => handleClose());\r\n    //}\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={state}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <DialogTitle id=\"form-dialog-title\">Add Fridge item</DialogTitle>\r\n      <DialogContent>\r\n        <Autocomplete\r\n          id=\"foodproducts-combobox\"\r\n          options={foodProducts}\r\n          getOptionLabel={(option) => option.foodProductName}\r\n          style={{ width: \"100%\" }}\r\n          onChange={onSelectChange}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"Select food product\"\r\n              variant=\"outlined\"\r\n            />\r\n          )}\r\n        />\r\n        <br />\r\n        <TextField\r\n          name=\"value\"\r\n          label=\"Value\"\r\n          fullWidth\r\n          onChange={handleNumberChange}\r\n          value={values.value}\r\n        />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <ToggleButtonGroup\r\n          value={unit}\r\n          exclusive\r\n          onChange={handleUnit}\r\n          aria-label=\"text alignment\"\r\n        >\r\n          <ToggleButton value=\"Grams\" aria-label=\"left aligned\">\r\n            <Typography variant=\"body1\">Grams</Typography>\r\n          </ToggleButton>\r\n          <ToggleButton value=\"Pieces\" aria-label=\"centered\">\r\n            <Typography>Pieces</Typography>\r\n          </ToggleButton>\r\n          <ToggleButton value=\"Mililiter\" aria-label=\"right aligned\">\r\n            <Typography>Mililiter</Typography>\r\n          </ToggleButton>\r\n          <ToggleButton value=\"NotAssigned\" aria-label=\"justified\">\r\n            <Typography>None</Typography>\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n        <br />\r\n        <br />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={handleClose}\r\n          color=\"secondary\"\r\n          variant=\"outlined\"\r\n          startIcon={<CloseIcon />}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={handleAdd}\r\n          color=\"primary\"\r\n          startIcon={<AddIcon />}\r\n          variant=\"outlined\"\r\n        >\r\n          Add\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default NewFridgeItemDialog;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../config_url.json\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FastfoodIcon from \"@material-ui/icons/Fastfood\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NewUserDialog from \"../components/dialogs/NewUserDialog\";\r\nimport NewFridgeItemDialog from \"../components/dialogs/NewFridgeItemDialog\";\r\n\r\nconst FridgeItemsDashboard = () => {\r\n  const { fridgeId } = useParams();\r\n  const [dummyState, rerender] = useState(1);\r\n  const [newUserDialogState, setNewUserDialogState] = useState(false);\r\n  const [newFridgeItemDialogState, setNewFridgeItemDialogState] = useState(\r\n    false\r\n  );\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [usersLoading, finishUsersLoading] = useState(true);\r\n  const [fridgeItemsLoading, finishFridgeItemsLoading] = useState(true);\r\n  const [fridgeUsers, setUsersData] = useState([]);\r\n  const [selectedUserId, selectUser] = useState(\"None\");\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: 1,\r\n      categoryName: \"category\",\r\n      productName: \"product\",\r\n      value: 10,\r\n      unit: \"unit\",\r\n      consume: (\r\n        <div>\r\n          <Button gradient=\"aqua\" size=\"sm\">\r\n            Consume\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect fridgeItem\");\r\n    if (selectedUserId != \"None\") {\r\n      fetch(\r\n        configData.SERVER_URL +\r\n          \"/api/fridgeItems/\" +\r\n          fridgeId +\r\n          \"/\" +\r\n          selectedUserId\r\n      )\r\n        .then((response) => response.json())\r\n        .then((json) => {\r\n          const rowsArray = json.map((item, index) => ({\r\n            id: index + 1,\r\n            productName: item.productName,\r\n            categoryName: item.categoryName,\r\n            value: item.value,\r\n            unit: item.unit,\r\n            consume: (\r\n              <span>\r\n                <TextField\r\n                  name=\"amount\"\r\n                  label=\"Amount\"\r\n                  fullWidth\r\n                  onChange={handleNumberChange}\r\n                  value={amount}\r\n                ></TextField>\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<FastfoodIcon />}\r\n                  onClick={() => handleConsume(item.fridgeItemId, item.unit)}\r\n                >\r\n                  Consume\r\n                </Button>\r\n              </span>\r\n            ),\r\n          }));\r\n\r\n          setRows(rowsArray);\r\n        })\r\n        .catch((error) => console.error(error))\r\n        .finally(() => finishFridgeItemsLoading(false));\r\n    }\r\n  }, [selectedUserId, dummyState]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect users\");\r\n    fetch(configData.SERVER_URL + \"/api/fridgeUsers/\" + fridgeId)\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        setUsersData([\r\n          { id: \"None\", name: \"None\" },\r\n          ...json,\r\n          // { id: \"All\", name: \"All\" },\r\n        ]);\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => finishUsersLoading(false));\r\n  }, [dummyState]);\r\n\r\n  const handleRefresh = () => {\r\n    rerender(dummyState + 1);\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const re = /^[0-9\\b]+$/;\r\n    if (e.target.value === \"\" || re.test(e.target.value)) {\r\n      console.log(e.target.value);\r\n      //setAmount(\"\");\r\n    }\r\n  };\r\n\r\n  const handleConsume = (fridgeItemId, unit) => {\r\n    //TODO: get value from user (dialog)\r\n\r\n    const obj = {\r\n      fridgeItemId: fridgeItemId,\r\n      userId: selectedUserId,\r\n      amountValue: {\r\n        value: 0,\r\n        unit: unit,\r\n      },\r\n    };\r\n\r\n    console.log(obj);\r\n\r\n    fetch(configData.SERVER_URL + \"/api/fridgeItems/\" + fridgeId + \"/consume\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    }).then(console.log(\"Success Consume\"));\r\n  };\r\n\r\n  const handleCloseUserDialog = () => {\r\n    setNewUserDialogState(false);\r\n  };\r\n\r\n  const handleCloseFridgeItemDialog = () => {\r\n    setNewFridgeItemDialogState(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NewUserDialog\r\n        fridgeId={fridgeId}\r\n        state={newUserDialogState}\r\n        handleClose={handleCloseUserDialog}\r\n      />\r\n      <NewFridgeItemDialog\r\n        fridgeId={fridgeId}\r\n        selectedUserId={selectedUserId}\r\n        state={newFridgeItemDialogState}\r\n        handleClose={handleCloseFridgeItemDialog}\r\n      />\r\n      {usersLoading ? (\r\n        <div>\r\n          <CircularProgress />\r\n          <p>Loading users</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"btn-group userBtns\">\r\n          {fridgeUsers.map((item) => {\r\n            return (\r\n              <Button\r\n                variant=\"contained\"\r\n                color={selectedUserId === item.id ? \"secondary\" : \"primary\"}\r\n                onClick={() => selectUser(item.id)}\r\n              >\r\n                {item.name}\r\n              </Button>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      <div>\r\n        <div className=\"btn-group userBtns\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => setNewFridgeItemDialogState(true)}\r\n          >\r\n            Add new fridge item\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => setNewUserDialogState(true)}\r\n          >\r\n            Add new user\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={handleRefresh}\r\n            startIcon={<RefreshIcon />}\r\n          >\r\n            Refresh\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n      {fridgeItemsLoading ? (\r\n        <p>Select user</p>\r\n      ) : (\r\n        <MDBTable>\r\n          <MDBTableHead columns={columns} />\r\n          <MDBTableBody rows={rows} />\r\n        </MDBTable>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    label: \"#\",\r\n    field: \"id\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Product\",\r\n    field: \"productName\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Category\",\r\n    field: \"categoryName\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Value\",\r\n    field: \"value\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Unit\",\r\n    field: \"unit\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"#\",\r\n    field: \"consume\",\r\n    sort: \"asc\",\r\n  },\r\n];\r\n\r\nexport default FridgeItemsDashboard;\r\n","import React, { useState } from \"react\";\r\nimport configData from \"../../config_url.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport SnackBar from \"@material-ui/core/Snackbar\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst NewFoodProductDialog = ({ categories, state, handleClose }) => {\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n  });\r\n  const [categoryId, setCategory] = useState(0);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const refreshForm = () => {\r\n    setValues({\r\n      name: \"\",\r\n      category: \"\",\r\n    });\r\n  };\r\n\r\n  const toastify = (val) => toast(val);\r\n  const onSelectChange = (event, val) => {\r\n    if (val != undefined && val != null) setCategory(val.foodProductId);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const obj = {\r\n      name: values.name,\r\n      category: categoryId,\r\n    };\r\n\r\n    fetch(configData.SERVER_URL + \"/api/foodProducts\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(obj),\r\n    })\r\n      .then(function (response) {\r\n        if (!response.ok) {\r\n          toastify(\"Cant add food product.\");\r\n          throw Error(response.statusText);\r\n        }\r\n        toastify(\"Food product added.\");\r\n        return response;\r\n      })\r\n      .then(refreshForm())\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n      .then(() => handleClose());\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ToastContainer />\r\n\r\n      <Dialog\r\n        open={state}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Add food product</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            name=\"name\"\r\n            label=\"Name\"\r\n            fullWidth\r\n            onChange={handleInputChange}\r\n            value={values.name}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Autocomplete\r\n            id=\"categories-combobox\"\r\n            options={categories}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: \"100%\" }}\r\n            onChange={onSelectChange}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Select category\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            variant=\"outlined\"\r\n            onClick={handleAdd}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewFoodProductDialog;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../config_url.json\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\nimport NewFoodProductDialog from \"../components/dialogs/NewFoodProductDialog\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport SnackBar from \"@material-ui/core/Snackbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst FoodProducts = () => {\r\n  const [dataLoading, finishLoading] = useState(true);\r\n  const [newFoodProductDialog, setNewFoodProductDialog] = useState(false);\r\n  const [categories, setCategories] = useState({\r\n    name: \"categoryName\",\r\n    categoryId: 1,\r\n  });\r\n\r\n  const [dummyState, rerender] = useState(1);\r\n  const handleRefresh = () => {\r\n    rerender(dummyState + 1);\r\n  };\r\n\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"foodProducts\",\r\n      category: \"category\",\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    fetch(configData.SERVER_URL + \"/api/foodproducts\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item, index) => ({\r\n          id: index + 1,\r\n          name: item.foodProductName,\r\n          category: item.foodProductCategory,\r\n        }));\r\n\r\n        setRows(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => finishLoading(false));\r\n\r\n    fetch(configData.SERVER_URL + \"/api/foodproducts/categories\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item) => ({\r\n          name: item.name,\r\n          categoryId: item.categoryId,\r\n        }));\r\n\r\n        setCategories(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, [dummyState]);\r\n\r\n  const handleCloseNewFoodProductDialog = () => {\r\n    setNewFoodProductDialog(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NewFoodProductDialog\r\n        categories={categories}\r\n        state={newFoodProductDialog}\r\n        handleClose={handleCloseNewFoodProductDialog}\r\n      />\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={() => setNewFoodProductDialog(true)}\r\n      >\r\n        Add new food product\r\n      </Button>\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={handleRefresh}\r\n        startIcon={<RefreshIcon />}\r\n      >\r\n        Refresh\r\n      </Button>\r\n      {dataLoading ? (\r\n        <div>\r\n          <CircularProgress />\r\n          <p>Loading food products</p>\r\n        </div>\r\n      ) : (\r\n        <MDBTable btn>\r\n          <MDBTableHead columns={columns} />\r\n          <MDBTableBody rows={rows} />\r\n        </MDBTable>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    label: \"#\",\r\n    field: \"id\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Name\",\r\n    field: \"name\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Category\",\r\n    field: \"category\",\r\n    sort: \"asc\",\r\n  },\r\n];\r\n\r\nexport default FoodProducts;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport configData from \"../config_url.json\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst Recipes = () => {\r\n  const [dataLoading, finishLoading] = useState(true);\r\n  const [open, setOpen] = useState(false);\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"name\",\r\n      category: \"cat\",\r\n      reqTime: \"req\",\r\n      difficulty: \"diff\",\r\n      details: (\r\n        <Button gradient=\"aqua\" size=\"sm\">\r\n          Details\r\n        </Button>\r\n      ),\r\n    },\r\n  ]);\r\n\r\n  const [recipeDetails, setRecipeDetails] = useState({\r\n    recipeName: \"recipe\",\r\n    recipeDescription: \"desc\",\r\n    foodProducts: \"items\",\r\n  });\r\n  const [foodProductsFormatted, setFoodProductsFormatted] = useState([\r\n    {\r\n      foodProductId: \"1\",\r\n      foodProductName: \"fpName1\",\r\n      AmountValue: { Value: \"1\", Unit: \"Grams\" },\r\n    },\r\n  ]);\r\n\r\n  function formatFoodProducts(foodProds) {\r\n    var foodProductsString = foodProds;\r\n    var jsonObj = JSON.parse(foodProductsString);\r\n    var foodProductsList = jsonObj.ArrayOfFoodProductDetails.FoodProductDetails;\r\n\r\n    setFoodProductsFormatted([]);\r\n    for (const [key, value] of Object.entries(foodProductsList)) {\r\n      setFoodProductsFormatted((oldArray) => [\r\n        ...oldArray,\r\n        {\r\n          FoodProductId: value.FoodProductId,\r\n          FoodProductName: value.FoodProductName,\r\n          AmountValue: {\r\n            Value: value.AmountValue.Value,\r\n            Unit: value.AmountValue.Unit,\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n  }\r\n\r\n  const handleClickOpen = (recipeName, desc, foodProducts) => {\r\n    setRecipeDetails({\r\n      recipeName: recipeName,\r\n      recipeDescription: desc,\r\n      foodProducts: foodProducts,\r\n    });\r\n\r\n    formatFoodProducts(foodProducts);\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    console.log(\"use this recipe\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(configData.SERVER_URL + \"/api/recipes\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const rowsArray = json.map((item, index) => ({\r\n          id: index + 1,\r\n          name: item.recipeName,\r\n          category: item.recipeCategory,\r\n          reqTime: item.requiredTime,\r\n          difficulty: item.levelOfDifficulty,\r\n          details: (\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={<VisibilityIcon />}\r\n              onClick={() =>\r\n                handleClickOpen(\r\n                  item.recipeName,\r\n                  item.description,\r\n                  item.foodProducts\r\n                )\r\n              }\r\n            >\r\n              Details\r\n            </Button>\r\n          ),\r\n        }));\r\n\r\n        setRows(rowsArray);\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => finishLoading(false));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">\r\n          {recipeDetails.recipeName}\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n            {foodProductsFormatted.map((foodProduct) => {\r\n              return (\r\n                <ListItem key={foodProduct.FoodProductId}>\r\n                  <ListItemText>\r\n                    - {foodProduct.foodProductName}{\" \"}\r\n                    {foodProduct.AmountValue.Value}{\" \"}\r\n                    {foodProduct.AmountValue.Unit}\r\n                  </ListItemText>\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n          <br />\r\n          <DialogContentText>\r\n            {recipeDetails.recipeDescription}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleAdd} color=\"primary\" variant=\"outlined\">\r\n            Use this recipe\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {dataLoading ? (\r\n        <div>\r\n          <CircularProgress />\r\n          <p>Loading recipes</p>\r\n        </div>\r\n      ) : (\r\n        <MDBTable btn>\r\n          <MDBTableHead columns={columns} />\r\n          <MDBTableBody rows={rows} />\r\n        </MDBTable>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    label: \"#\",\r\n    field: \"id\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Name\",\r\n    field: \"name\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Category\",\r\n    field: \"category\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Required time\",\r\n    field: \"reqTime\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"Difficulty\",\r\n    field: \"difficulty\",\r\n    sort: \"asc\",\r\n  },\r\n  {\r\n    label: \"#\",\r\n    field: \"details\",\r\n    sort: \"asc\",\r\n  },\r\n];\r\n\r\nexport default Recipes;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <nav>\r\n      {/* <NavLink exact activeClassName=\"active\" to=\"/\" className=\"header-links\">\r\n        Home\r\n      </NavLink> */}\r\n      <NavLink activeClassName=\"active\" to=\"/fridges\" className=\"header-links\">\r\n        Fridges\r\n      </NavLink>\r\n      <NavLink\r\n        activeClassName=\"active\"\r\n        to=\"/foodProducts\"\r\n        className=\"header-links\"\r\n      >\r\n        FoodProducts\r\n      </NavLink>\r\n      <NavLink activeClassName=\"active\" to=\"/recipes\" className=\"header-links\">\r\n        Recipes\r\n      </NavLink>\r\n    </nav>\r\n  );\r\n}\r\nexport default Header;\r\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport FridgesDashboard from \"./pages/FridgesDashboard\";\nimport FridgeItemsDashboard from \"./pages/FridgeItemsDashboard\";\nimport FoodProducts from \"./pages/FoodProducts\";\nimport Recipes from \"./pages/Recipes\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\">\n              <Redirect to=\"/fridges\" />\n            </Route>\n            <Route path=\"/recipes\">\n              <Recipes />\n            </Route>\n            <Route path=\"/fridges\">\n              <FridgesDashboard />\n            </Route>\n            <Route path=\"/foodProducts\">\n              <FoodProducts />\n            </Route>\n\n            <Route path=\"/fridgeitems/:fridgeId\">\n              <FridgeItemsDashboard />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}